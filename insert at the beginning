#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* head = NULL;
struct Node* last = NULL; // Global variables for head and last in circular list
void insertToEmptyList() {
    if (head != NULL) {
        printf("List is not empty, cannot insert to empty list\n");
        return;
    }
    struct Node* curr = (struct Node*)malloc(sizeof(struct Node));
    if (curr == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter the data: ");
    scanf("%d", &curr->data);
    curr->next = curr; // Point to itself to form a circular link
    head = curr; // Set head to the new node
    last = curr; // Set last to the new node
}
void insertAtBeginning() {
    if (last == NULL) {
        insertToEmptyList();
        return;
    }
    struct Node* curr = (struct Node*)malloc(sizeof(struct Node));
    if (curr == NULL) {
        printf("Memory allocation failed\n");
        return;
    }
    printf("Enter the data: ");
    scanf("%d", &curr->data);
    curr->next = head; // Point new node to current head
    last->next = curr; // Link last node to new node
    head = curr; // Update head to new node
}
void printList() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head); // Traverse until we reach back to the head
    printf("\n");
}
int main() {
    // Example usage
    insertToEmptyList(); // Initialize the list
    insertAtBeginning(); // Insert one node at the beginning
    printf("List after insertions:\n");
    printList();
    return 0;
}
